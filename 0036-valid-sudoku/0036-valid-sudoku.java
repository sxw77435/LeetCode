/*数独条件：
每一行9个数字，每一竖9个数字，每3*3的格子中9个数字
*/
class Solution {
    public boolean isValidSudoku(char[][] board) {
        // 使用 HashSet 存储标记，确保每个数字在行、列和子格中唯一
        Set<String> seen = new HashSet<>();
        
        // 遍历数独的每一行和每一列
        for (int i = 0; i < 9; ++i) { // 外层循环遍历每一行
            for (int j = 0; j < 9; ++j) { // 内层循环遍历每一列
                // 如果当前格子不是空（'.'），就进行规则检查
                if (board[i][j] != '.') {
                    // 获取当前数字，并生成标记字符串
                    String b = "(" + board[i][j] + ")"; // 表示当前数字，如 "(5)"
                    
                    // 为行、列和子格生成唯一标记
                    // b + i 表示该数字出现在第 i 行
                    // j + b 表示该数字出现在第 j 列
                    // i/3 + b + j/3 表示该数字出现在某个 3x3 子格
                    if (!seen.add(b + i) || // 行标记：如 "(5)0" 表示数字 5 在第 0 行
                        !seen.add(j + b) || // 列标记：如 "0(5)" 表示数字 5 在第 0 列
                        !seen.add(i / 3 + b + j / 3)) { // 子格标记：如 "0(5)1" 表示数字 5 在第 0 行第 1 列的子格
                        return false; // 如果任何一个标记已经存在，说明数字重复，数独无效
                    }
                }
            }
        }
        return true; // 遍历完成后，未发现冲突，数独有效
    }
}